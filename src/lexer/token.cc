#include "token.h"

std::unordered_map<std::string, TOKEN> Token::string_to_tag{
    {"auto", TOKEN::AUTO},
    {"break", TOKEN::BREAK},
    {"case", TOKEN::CASE},
    {"char", TOKEN::CHAR},
    {"const", TOKEN::CONST},
    {"continue", TOKEN::CONTINUE},
    {"default", TOKEN::DEFAULT},
    {"do", TOKEN::DO},
    {"double", TOKEN::DOUBLE},
    {"else", TOKEN::ELSE},
    {"enum", TOKEN::ENUM},
    {"extern", TOKEN::EXTERN},
    {"float", TOKEN::FLOAT},
    {"for", TOKEN::FOR},
    {"goto", TOKEN::GOTO},
    {"if", TOKEN::IF},
    {"inline", TOKEN::INLINE},
    {"int", TOKEN::INT},
    {"long", TOKEN::LONG},
    {"register", TOKEN::REGISTER},
    {"restrict", TOKEN::RESTRICT},
    {"return", TOKEN::RETURN},
    {"short", TOKEN::SHORT},
    {"signed", TOKEN::SIGNED},
    {"sizeof", TOKEN::SIZEOF},
    {"static", TOKEN::STATIC},
    {"struct", TOKEN::STRUCT},
    {"switch", TOKEN::SWITCH},
    {"typedef", TOKEN::TYPEDEF},
    {"union", TOKEN::UNION},
    {"unsigned", TOKEN::UNSIGNED},
    {"void", TOKEN::VOID},
    {"volatile", TOKEN::VOLATILE},
    {"while", TOKEN::WHILE},
    {"alignas", TOKEN::ALIGNAS},
    {"alignof", TOKEN::ALIGNOF},
    {"atomic", TOKEN::ATOMIC},
    {"complex", TOKEN::COMPLEX},
    {"generic", TOKEN::GENERIC},
    {"imaginary", TOKEN::IMAGINARY},
    {"noreturn", TOKEN::NORETURN},
    {"static_assert", TOKEN::STATIC_ASSERT},
    {"thread_local", TOKEN::THREAD_LOCAL},
};

std::unordered_map<TOKEN, std::string> Token::tag_to_string{
    {TOKEN::AUTO, "AUTO"},
    {TOKEN::BREAK, "BREAK"},
    {TOKEN::CASE, "CASE"},
    {TOKEN::CHAR, "CHAR"},
    {TOKEN::CONST, "CONST"},
    {TOKEN::CONTINUE, "CONTINUE"},
    {TOKEN::DEFAULT, "DEFAULT"},
    {TOKEN::DO, "DO"},
    {TOKEN::DOUBLE, "DOUBLE"},
    {TOKEN::ELSE, "ELSE"},
    {TOKEN::ENUM, "ENUM"},
    {TOKEN::EXTERN, "EXTERN"},
    {TOKEN::FLOAT, "FLOAT"},
    {TOKEN::FOR, "FOR"},
    {TOKEN::GOTO, "GOTO"},
    {TOKEN::IF, "IF"},
    {TOKEN::INLINE, "INLINE"},
    {TOKEN::INT, "INT"},
    {TOKEN::LONG, "LONG"},
    {TOKEN::REGISTER, "REGIATER"},
    {TOKEN::RESTRICT, "RESTRICT"},
    {TOKEN::RETURN, "RETURN"},
    {TOKEN::SHORT, "SHORT"},
    {TOKEN::SIGNED, "SIGNED"},
    {TOKEN::SIZEOF, "SIZEOF"},
    {TOKEN::STATIC, "STATIC"},
    {TOKEN::STRUCT, "STRUCT"},
    {TOKEN::SWITCH, "SWITCH"},
    {TOKEN::TYPEDEF, "TYPEDEF"},
    {TOKEN::UNION, "UNION"},
    {TOKEN::UNSIGNED, "UNSIGNED"},
    {TOKEN::VOID, "VOID"},
    {TOKEN::VOLATILE, "VOLATILE"},
    {TOKEN::WHILE, "WHILE"},
    {TOKEN::ALIGNAS, "ALIGNAS"},
    {TOKEN::ALIGNOF, "ALIGNOF"},
    {TOKEN::ATOMIC, "ATOMIC"},
    {TOKEN::COMPLEX, "COMPLEX"},
    {TOKEN::GENERIC, "GENERIC"},
    {TOKEN::IMAGINARY, "IMAGINARY"},
    {TOKEN::NORETURN, "NORETURN"},
    {TOKEN::STATIC_ASSERT, "STATIC_ASSERT"},
    {TOKEN::THREAD_LOCAL, "THREAD_LOCAL"},

    {TOKEN::IDENTIFIER, "IDENTIFIER"},
    {TOKEN::INTEGER_CONTANT, "INTEGER_CONST"},
    {TOKEN::LPAR, "LPAR("},
    {TOKEN::RPAR, "RPAR)"},
    {TOKEN::LSQUBRKT, "LSQUBRKT["},
    {TOKEN::RSQUBRKT, "RSQUBRKT]"},
    {TOKEN::LBRACE, "LBRACE{"},
    {TOKEN::RBRACE, "RBRACE}"},
    {TOKEN::STRING_LITERAL, "STRING_LITERAL"},
    {TOKEN::FILE_EOF, "EOF"},
    {TOKEN::COLON, "COLON"},
    {TOKEN::SEMI, "SEMICOLON"},
    {TOKEN::STAR, "STAR"},
};