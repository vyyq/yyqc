/**
 * This file is base on ISO/IEC 9899:201x
 * Statements and blocks:
 * Syntax:
 *  statement:
 *    - labeled-statement
 *      - identifier : statement
 *      - case constant-expression : statement
 *      - default : statement
 *    - compound-statement
 *      - compound-sstatement : { block-item-list_{opt} }
 *      - block-item-list:
 *        - block-item
 *        - block-item-list block-item
 *      - block-item:
 *        - declaration
 *        - statement
 *    - expression-statement
 *      - expression_{opt}
 *    - selection-statement
 *      - if ( expression ) statement
 *      - if ( expression ) statement else statement
 *      - switch ( expression ) statement
 *    - iteration-statement
 *      - while ( expression ) statement
 *      - do statement while ( expression ) ;
 *      - for ( expression_{opt} ; expression_{opt} ; expression_{opt} ) statement
 *      - for ( declaration expression_{opt} ; expression_{opt} ) statement
 *    - jump-statement
 *      - goto identifier ;
 *      - continue ;
 *      - break ;
 *      - return expression_{opt}
 */

/**
 * ISO/IEC 9899:201x
 *
 * - primary-expression
 *   - identifier
 *   - constant
 *   - string-literal
 *   - ( expression )
 *   - generic-selection
 *
 * - postfix-expression
 *   - primary-expression
 *   - postfix-expression [expression]
 *   - postfix-expression (argument-pression-list_{opt})
 *   - postfix-expression . identifier
 *   - postfix-expression -> identifier
 *   - postfix-expression ++
 *   - postfix-expression --
 *   - ( type-name ) { initializer-list }
 *   - ( type-name ) { initializer , }
 *
 * - unary-expression
 *   - postfix-expression
 *   ++ unary-expression
 *   -- unary-expression
 *   unary-operator cast-expression
 *   sizeof unary-expression
 *   sizeof ( type-name )
 *   _Alignof ( type-name )
 *
 * - cast-expression
 *   - cast-expression:
 *      - unary-expression
 *      - ( type-name ) cast-expression
 *
 * - multiplicative-expression
 *   - cast-expression
 *   - multiplicative-expression * cast-expression
 *   - multiplicative-expression / cast-expression
 *   - multiplicative-expression % cast-expression
 *
 * - additive-expression:
 *   - multiplicative-expression
 *   - additive-expression + multiplicative-expression
 *   - additive-expression - multiplicative-expression
 *
 * - shift-expression:
 *   - additive-expression
 *   - shift-expression << additive-expression
 *   - shift-expression >> additive-expression
 *
 * - relational-expression:
 *   - shift-expression
 *   - relational-expression < shift-expression
 *   - relational-expression > shift-expression
 *   - relational-expression <= shift-expression
 *   - relational-expression >= shift-expression
 *
 * - equality-expression:
 *   - relational-expression
 *   - equality-expression == relational-expression
 *   - equality-expression != relational-expression
 *
 * - AND-expression:
 *   - equality-expression
 *   - AND-expression & equality-expression
 *
 * - exclusive-OR-expression:
 *   - AND-expression
 *   - exclusive-OR-expression ^ AND-expression
 *
 * - inclusive-OR-expression:
 *   - exclusive-OR-expression
 *   - inclusive-OR-expression | exclusive-OR-expression
 *
 * - logical-AND-expression:
 *   - inclusive-OR-expression
 *   - logical-AND-expression &&  inclusive-OR-expression
 *
 * - logical-OR-expression:
 *   - logical-AND-expression
 *   - logical-OR-expression || logical-AND-expression
 *
 * - conditional-expression
 *   - logical-OR-expression
 *   - logical-OR-expression ? expression : conditional-expression
 *
 * - assignment-expression:
 *   - conditional-expression
 *   - unary-expression assignment-operator assignment-expression
 *
 * - assignment operator:
 *   = *= /= %= += -= <<= >>= &= ^= |=
 *
 * - expression:
 *   - assignment-expression
 *   - expresssion, assignment-expression
 *
 * - constant-expression:
 *   - conditional-expression
 */
